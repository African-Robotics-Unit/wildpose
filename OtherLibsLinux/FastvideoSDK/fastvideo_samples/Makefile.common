CUDA_VERSION = 10.2

STATIC_LIB = 0

# x86_64 - 64-bit OS (x86 architecture)
# aarch64 - 64-bit OS (ARM (?) architecture)
HOST_ARCH := $(shell uname -m)

HOST_OS := $(shell uname -s 2>/dev/null | tr "[:upper:]" "[:lower:]")
OS_SIZE := $(shell getconf LONG_BIT)
OS      := $(shell cat /etc/issue)
GCC ?= gcc
CUDA_PATH ?= /usr/local/cuda-$(CUDA_VERSION)

# Common path
CUDA_INC_PATH   ?= $(CUDA_PATH)/include
CUDA_COMMON_PATH?= $(CUDA_PATH)/common
CUDA_BIN_PATH   ?= $(CUDA_PATH)/bin

ifneq ($(HOST_ARCH),aarch64)
	ifneq (,$(findstring Ubuntu,$(OS)))
		DEB := $(shell dpkg -l | grep cuda)
		ifneq (,$(findstring cuda, $(DEB)))
			# Gets Driver Branch
			DRIVER_BRANCH := $(shell nvidia-smi | grep Driver | cut -f 3 -d' ' | cut -f 1 -d '.')
			NVML_LIB := /usr/lib/nvidia-$(DRIVER_BRANCH)
		else 
			NVML_LIB := /lib${OS_SIZE}
		endif
	endif
	ifneq (,$(findstring Debian,$(OS)))
		NVML_LIB := /usr/lib/x86_64-linux-gnu/nvidia/current/
	endif
	NVML_LIB_L     ?= $(addprefix -L , $(NVML_LIB))
endif

ifneq (${OS_SIZE},$(filter ${OS_SIZE},32 64))
	$(error Unknown architecture!)
endif

TOP := ./../../
FFMPEG_PATH     ?= $(TOP)libs/ffmpeg
FFMPEG_LIB      ?= $(FFMPEG_PATH)/lib/linux/$(HOST_ARCH)/

JPEG_CPU_LIB    ?= $(TOP)libs/libjpeg-turbo/12-bit/
JPEG_LIB        ?= $(TOP)libs/libjpeg-turbo/08-bit/

ifeq ($(OS_SIZE),32)
  CUDA_LIB_PATH   ?= $(CUDA_PATH)/lib/
  SYSTEM_LIB_PATH ?= /usr/lib/
else
  CUDA_LIB_PATH  ?= $(CUDA_PATH)/lib64/
  SYSTEM_LIB_PATH ?= /usr/lib64/
endif

CC_FLAGS := -std=c++11 -O2 -fPIC
LD_FLAGS := -L$(CUDA_LIB_PATH) -lcudart -lcuda
LD_FLAGS += -L$(TOP)bin
LD_FLAGS += -L$(JPEG_LIB)/lib/linux/$(HOST_ARCH) -ljpeg
LD_FLAGS += -L$(TOP)libs/libtiff/lib/linux/$(HOST_ARCH) -ltiff

ifneq ($(HOST_ARCH),aarch64)
	LD_FLAGS +=$(NVML_LIB_L) -lnvidia-ml
else
	CC_FLAGS += -D NVML_DISABLE
endif

ifeq ($(STATIC_LIB),1)
  LD_FLAGS += $(TOP)bin/libfastvideo_sdk.a -lpthread
#  LD_FLAGS += $(TOP)libs/senselock/linux/$(HOST_ARCH)/lib/libsense4.a
else
  LD_FLAGS += -lfastvideo_sdk
endif

LD_FLAGS += -lm -lstdc++

ifneq ($(HOST_ARCH),aarch64)
	ifneq ($(STATIC_LIB),1)
	  LD_FLAGS += -lusb
	endif
endif

INCLUDES := -I./ -I$(TOP)common/ -I$(TOP)core/
INCLUDES += -I$(TOP)core_samples/ -I$(TOP)core_samples/helper_image/ -I$(TOP)core_samples/options/
INCLUDES += -I$(TOP)fastvideo_sdk/inc/ -I$(CUDA_INC_PATH) -O2 -I$(FFMPEG_PATH)/inc/
INCLUDES += -I$(TOP)libs/libtiff/include/linux/
CC_FLAGS += $(INCLUDES)

SOURCES_CPP := $(wildcard ./*.cpp)

SOURCES_CPP += $(TOP)common/timing.cpp
SOURCES_CPP += $(TOP)core_samples/FilesParameterChecker.cpp
SOURCES_CPP += $(TOP)core_samples/GPU.cpp
SOURCES_CPP += $(TOP)core_samples/Help.cpp
SOURCES_CPP += $(TOP)core_samples/Init.cpp
 
SOURCES_CPP += $(TOP)core_samples/helper_image/supported_files.cpp
SOURCES_CPP += $(TOP)core_samples/helper_image/bmp.cpp
SOURCES_CPP += $(TOP)core_samples/helper_image/ppm.cpp
SOURCES_CPP += $(TOP)core_samples/helper_image/tiff.cpp
SOURCES_CPP += $(TOP)core_samples/helper_image/helper_dir.cpp
SOURCES_CPP += $(TOP)core_samples/helper_image/helper_bytestream.cpp

SOURCES_CPP += $(TOP)core_samples/PreloadUncompressedImage.cpp
SOURCES_CPP += $(TOP)core_samples/MultiThreadInfoPrinter.cpp
SOURCES_CPP += $(TOP)core_samples/AllocatorManagerInstances.cpp

SOURCES_CPP += $(TOP)core_samples/options/ParametersParser.cpp
SOURCES_CPP += $(TOP)core_samples/options/BaseOptions.cpp
